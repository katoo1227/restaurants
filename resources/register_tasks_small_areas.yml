# Lambda
LambdaRegisterTasksSmallAreas:
    Type: "AWS::Serverless::Function"
    Properties:
        CodeUri: "./lambda_functions/register_tasks_small_areas/"
        FunctionName: !If
            - "IsProd"
            - "RestaurantsRegisterTasksSmallAreasProd"
            - "RestaurantsRegisterTasksSmallAreasDev"
        Role: !GetAtt "IamRoleRegisterTasksSmallAreas.Arn"
        Runtime: "python3.12"
        Layers:
            - !Ref "LambdaLayerHandlerS3Sqlite"
            - !Ref "LambdaLayerDynamodbTypes"
        Environment:
            Variables:
                ARN_LAMBDA_ERROR_COMMON: !GetAtt "LambdaErrorCommon.Arn"
                ARN_LAMBDA_HANDLER_SCHEDULES: !Ref "LambdaHandlerSchedules"
                ARN_LAMBDA_REGISTER_PAGES: !GetAtt "LambdaRegisterPages.Arn"
                ARN_IAM_ROLE_INVOKE_REGISTER_PAGES: !GetAtt "IamRoleInvokeRegisterPages.Arn"
                NAME_SCHEDULE_GROUP: !Ref "EventBridgeScheduleGroup"
                NAME_TASK_REGISTER_PAGES: !Ref "TaskNameRegisterPages"
                NAME_BUCKET_DATABASE: !Ref "S3Database"
                NAME_FILE_DATABASE: !Ref "Sqlite3DbFileName"
                NAME_LOCK_FILE_DATABASE: !Ref "Sqlite3DbLockFileName"
                NAME_DYNAMODB_TABLE_TASKS: !Ref "DynamodbRestaurantsTasks"
        Handler: "app.lambda_handler"
        Architectures:
            - "arm64"
        Timeout: 30

        Events:
            EventBridgeScheduleLambdaRegisterTasksSmallAreas:
                Type: "ScheduleV2"
                Properties:
                    ScheduleExpression: cron(0 1 ? * SUN *)
                    ScheduleExpressionTimezone: "Asia/Tokyo"
                    State: ENABLED
                    GroupName: !Ref "EventBridgeScheduleGroup"
                    Name: !If
                        - "IsProd"
                        - "RegisterTasksSmallAreasProd"
                        - "RegisterTasksSmallAreasDev"
                    RoleArn: !GetAtt "IamRoleInvokeRegisterTasksSmallAreas.Arn"
                    Input: '{"middle_area_code": "Y883"}'

# IAMロール
IamRoleRegisterTasksSmallAreas:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsRegisterTasksSmallAreasProd"
            - "RestaurantsRegisterTasksSmallAreasDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "lambda.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyRegisterTasksSmallAreas:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsRegisterTasksSmallAreasProd"
            - "RestaurantsRegisterTasksSmallAreasDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource:
                      - !GetAtt "LambdaErrorCommon.Arn"
                      - !GetAtt "LambdaHandlerSchedules.Arn"
                - Effect: "Allow"
                  Action:
                      - "s3:GetObject"
                      - "s3:PutObject"
                  Resource: !Sub "arn:aws:s3:::${S3Database}/${Sqlite3DbFileName}"
                - Effect: "Allow"
                  Action:
                      - "s3:GetObject"
                      - "s3:PutObject"
                      - "s3:DeleteObject"
                  Resource: !Sub "arn:aws:s3:::${S3Database}/${Sqlite3DbLockFileName}"
                - Effect: "Allow"
                  Action:
                      - "dynamodb:BatchWriteItem"
                  Resource:
                      - !GetAtt "DynamodbRestaurantsTasks.Arn"
        Roles:
            - !Ref "IamRoleRegisterTasksSmallAreas"

# IAMロール
IamRoleInvokeRegisterTasksSmallAreas:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsInvokeRegisterTasksSmallAreasProd"
            - "RestaurantsInvokeRegisterTasksSmallAreasDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "scheduler.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyInvokeRegisterTasksSmallAreas:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsInvokeRegisterTasksSmallAreasProd"
            - "RestaurantsInvokeRegisterTasksSmallAreasDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource: !GetAtt "LambdaRegisterTasksSmallAreas.Arn"
        Roles:
            - !Ref "IamRoleInvokeRegisterTasksSmallAreas"