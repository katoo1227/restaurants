# Lambda
LambdaScrapingDetail:
    Type: "AWS::Serverless::Function"
    Properties:
        CodeUri: "./lambda_functions/scraping_detail/"
        FunctionName: !If
            - "IsProd"
            - "RestaurantsScrapingDetailProd"
            - "RestaurantsScrapingDetailDev"
        Role: !GetAtt "IamRoleScrapingDetail.Arn"
        Runtime: "python3.12"
        Layers:
            - !Ref "LambdaLayerSqliteClient"
            - !Ref "LambdaLayerDynamodbTypes"
            - !Ref "LambdaLayerRequests"
        Environment:
            Variables:
                ARN_LAMBDA_ERROR_COMMON: !GetAtt "LambdaErrorCommon.Arn"
                ARN_LAMBDA_HANDLER_SCHEDULES: !GetAtt "LambdaHandlerSchedules.Arn"
                NAME_TASK_SCRAPING_DETAIL: !Ref "TaskNameScrapingDetail"
                NAME_BUCKET_DATABASE: !Ref "S3Database"
                NAME_FILE_DATABASE: !Ref "Sqlite3DbFileName"
                NAME_LOCK_FILE_DATABASE: !Ref "Sqlite3DbLockFileName"
                NAME_BUCKET_IMAGES: !Ref "S3Images"
                NAME_DYNAMODB_TABLE_TASKS: !Ref "DynamodbRestaurantsTasks"
                PARAMETER_STORE_NAME_GCP_API_KEY: !Ref "ParameterStoreNameGcpApiKey"
        Handler: "app.lambda_handler"
        Architectures:
            - "arm64"
        Timeout: 600

# IAMロール
IamRoleScrapingDetail:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsScrapingDetailProd"
            - "RestaurantsScrapingDetailDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "lambda.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyScrapingDetail:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsScrapingDetailProd"
            - "RestaurantsScrapingDetailDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource:
                      - !GetAtt "LambdaErrorCommon.Arn"
                      - !GetAtt "LambdaHandlerSchedules.Arn"
                - Effect: "Allow"
                  Action:
                      - "dynamodb:Query"
                      - "dynamodb:DeleteItem"
                  Resource: !GetAtt "DynamodbRestaurantsTasks.Arn"
                - Effect: "Allow"
                  Action:
                      - "s3:GetObject"
                      - "s3:PutObject"
                  Resource: !Sub "arn:aws:s3:::${S3Database}/${Sqlite3DbFileName}"
                - Effect: "Allow"
                  Action:
                      - "s3:GetObject"
                      - "s3:PutObject"
                      - "s3:DeleteObject"
                  Resource: !Sub "arn:aws:s3:::${S3Database}/${Sqlite3DbLockFileName}"
                - Effect: "Allow"
                  Action:
                      - "s3:ListBucket"
                  Resource: !Sub "arn:aws:s3:::${S3Images}"
                - Effect: "Allow"
                  Action:
                      - "s3:PutObject"
                      - "s3:DeleteObject"
                  Resource: !Sub "arn:aws:s3:::${S3Images}/images/*"
                - Effect: "Allow"
                  Action:
                      - "ssm:GetParameter"
                  Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreNameGcpApiKey}"
        Roles:
            - !Ref "IamRoleScrapingDetail"

# IAMロール
IamRoleInvokeScrapingDetail:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsInvokeScrapingDetailProd"
            - "RestaurantsInvokeScrapingDetailDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "scheduler.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyInvokeScrapingDetail:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsInvokeScrapingDetailProd"
            - "RestaurantsInvokeScrapingDetailDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource: !GetAtt "LambdaScrapingDetail.Arn"
        Roles:
            - !Ref "IamRoleInvokeScrapingDetail"