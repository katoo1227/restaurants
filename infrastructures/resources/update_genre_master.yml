# Lambda
LambdaUpdateGenreMaster:
    Type: "AWS::Serverless::Function"
    Properties:
        CodeUri: "./lambda_functions/update_genre_master/"
        FunctionName: !If
            - "IsProd"
            - "RestaurantsUpdateGenreMasterProd"
            - "RestaurantsUpdateGenreMasterDev"
        Role: !GetAtt "IamRoleUpdateGenreMaster.Arn"
        Runtime: "python3.12"
        Layers:
            - !Ref "LambdaLayerHotpepperApiClient"
            - !Ref "LambdaLayerDbClient"
        Environment:
            Variables:
                ENV: !Ref "EnvironmentType"
                SAKURA_DATABASE_API_KEY_PATH: !Ref "ParameterStoreNameSakuraDatabaseApiKey"
                SAKURA_DATABASE_API_URL: !Ref "SakuraDatabaseApiUrl"
                ARN_LAMBDA_ERROR_COMMON: !GetAtt "LambdaErrorCommon.Arn"
                PARAMETER_STORE_NAME_HOTPEPPER_API_KEY: !Ref "ParameterStoreNameHotpepperApiKey"
        Handler: "app.lambda_handler"
        Architectures:
            - "arm64"
        Timeout: 30

        Events:
            EventBridgeScheduleLambdaUpdateGenreMaster:
                Type: "ScheduleV2"
                Properties:
                    ScheduleExpression: cron(0 0 ? * SUN *)
                    ScheduleExpressionTimezone: "Asia/Tokyo"
                    State: ENABLED
                    GroupName: !Ref "EventBridgeScheduleGroup"
                    Name: !If
                        - "IsProd"
                        - "UpdateGenreMasterProd"
                        - "UpdateGenreMasterDev"
                    RoleArn: !GetAtt "IamRoleInvokeUpdateGenreMaster.Arn"

# IAMロール
IamRoleUpdateGenreMaster:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsUpdateGenreMasterProd"
            - "RestaurantsUpdateGenreMasterDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "lambda.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyUpdateGenreMaster:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsUpdateGenreMasterProd"
            - "RestaurantsUpdateGenreMasterDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "ssm:GetParameter"
                  Resource:
                      - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreNameHotpepperApiKey}"
                      - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreNameSakuraDatabaseApiKey}"
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource:
                      - !GetAtt "LambdaErrorCommon.Arn"
        Roles:
            - !Ref "IamRoleUpdateGenreMaster"

# スケジュール実行IAMロール
IamRoleInvokeUpdateGenreMaster:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsInvokeUpdateGenreMasterProd"
            - "RestaurantsInvokeUpdateGenreMasterDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "scheduler.amazonaws.com"
                  Action: "sts:AssumeRole"

# スケジュール実行IAMポリシー
IamPolicyInvokeUpdateGenreMaster:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsInvokeUpdateGenreMasterProd"
            - "RestaurantsInvokeUpdateGenreMasterDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource: !GetAtt "LambdaUpdateGenreMaster.Arn"
        Roles:
            - !Ref "IamRoleInvokeUpdateGenreMaster"