# Lambda
LambdaHandlerSchedules:
    Type: "AWS::Serverless::Function"
    Properties:
        CodeUri: "./lambda_functions/handler_schedules/"
        FunctionName: !If
            - "IsProd"
            - "RestaurantsHandlerSchedulesProd"
            - "RestaurantsHandlerSchedulesDev"
        Role: !GetAtt "IamRoleHandlerSchedules.Arn"
        Runtime: "python3.12"
        Environment:
            Variables:
                ARN_LAMBDA_ERROR_COMMON: !GetAtt "LambdaErrorCommon.Arn"
                ARN_LAMBDA_LINE_NOTIFY: !GetAtt "LambdaLineNotify.Arn"
                NAME_SCHEDULE_GROUP: !Ref "EventBridgeScheduleGroup"
        Handler: "app.lambda_handler"
        Architectures:
            - "arm64"
        Timeout: 30

# IAMロール
IamRoleHandlerSchedules:
    Type: "AWS::IAM::Role"
    Properties:
        RoleName: !If
            - "IsProd"
            - "RestaurantsHandlerSchedulesProd"
            - "RestaurantsHandlerSchedulesDev"
        AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Principal:
                      Service: "lambda.amazonaws.com"
                  Action: "sts:AssumeRole"

# IAMポリシー
IamPolicyHandlerSchedules:
    Type: "AWS::IAM::Policy"
    Properties:
        PolicyName: !If
            - "IsProd"
            - "RestaurantsHandlerSchedulesProd"
            - "RestaurantsHandlerSchedulesDev"
        PolicyDocument:
            Version: "2012-10-17"
            Statement:
                - Effect: "Allow"
                  Action:
                      - "lambda:InvokeFunction"
                  Resource:
                      - !GetAtt "LambdaErrorCommon.Arn"
                      - !GetAtt "LambdaLineNotify.Arn"
                - Effect: "Allow"
                  Action:
                      - "scheduler:GetSchedule"
                      - "scheduler:CreateSchedule"
                      - "scheduler:DeleteSchedule"
                  Resource:
                      - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${EventBridgeScheduleGroup}/${TaskNameRegisterTasksPages}"
                      - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${EventBridgeScheduleGroup}/${TaskNameScrapingAbstract}"
                      - !Sub "arn:aws:scheduler:${AWS::Region}:${AWS::AccountId}:schedule/${EventBridgeScheduleGroup}/${TaskNameScrapingDetail}"
                - Effect: "Allow"
                  Action:
                      - "iam:PassRole"
                  Resource:
                      - !GetAtt "IamRoleInvokeRegisterTasksPages.Arn"
                      - !GetAtt "IamRoleInvokeScrapingAbstract.Arn"
                      - !GetAtt "IamRoleInvokeScrapingDetail.Arn"
        Roles:
            - !Ref "IamRoleHandlerSchedules"